<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#subClassOf> _:B883733254401389c72bab443f718d177 <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#subClassOf> _:Bcaf2d51aa2250dea7ad9705c8e50a62c <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#label> "Context Descriptor"@en <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#comment> "A ContextDescriptor instance is a container class that allows the definition of relationships (dependencies) among ontology classes. \n\nThe goal is to define relations among classes, therefore, the proposed ontology treats classes as instances, allowing property assertions to be made among domain concepts. Intuitively, the ontology can be thought of as a conceptual (meta) layer that can be placed on top of any domain activity ontology. This way, instances of the ContextDescriptor are used to link domain activities (describes property) with one or more lower-level conceptualisations through dependency property assertions.\n\nThe pattern has been used for building human activity models by defining the dependencies between low-level observations and high-level activities. \n\nFor more details, please see the relevant paper: \nGeorgios Meditskos, Efstratios Kontopoulos, Ioannis Kompatsiaris, \"Knowledge-driven Activity Recognition and Segmentation Using Context Connections\", International Semantic Web Conference (ISWC), pp. 260-275, Riva del Garda, Trento, Italy, 19-23 October 2014 "@en <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.loa-cnr.it/ontologies/DUL.owl#Situation> <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.demcare.eu/ontologies/contextdescriptor.owl#ContextDescriptor> <http://www.w3.org/2000/01/rdf-schema#subClassOf> _:Ba9804cfd3a587a95eaf61a8057b8f9e8 <http://www.demcare.eu/ontologies/contextdescriptor.owl> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.purl.org/drammar#DescriptionTemplate> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#comment> "The situation schema provides the pattern for the description of incidents and states. It is inspired by the Situation ontology Pattern of the Ontology Design Pattern initiative (http://ontologydesignpatterns.org/). So, a SituationSchema describes (\"describes\" object property) a DramaPerdurant (either a State or a Process).\nThe schema works as a hub for the roles involved in a situation. The property hasRole links the Situation class (its domain) with the Role class (the range of the property). Also, notice that, as illustrated in the documentation of the SituationSchema class, a Situation Schema (or, better, its subclasses) does not directly refer to the external linguistic knowledge employed to describe drama: rather, it refers to the ExternalRefSchema class (subclass of the top level ExternalReference class), which in  turn refers to the linguistic knowledge. The SituationSchema class specializes into specific schemata for describing specific type of situations: \n- FrameNetSchema: for describing processes, like giving or killing (in Drammar, they are grouped into units arranged on timelines), and states, like being behind some object or being dead (in Drammar, they are bundled into sets that border timelines and plans). \n- MentalStateSchema: this class groups the specific types of schemata for describing the mental states of the agents in Drammar, namely beliefs, goals, emotions and values. \nTechnically, the subtypes of SituationSchema are characterized by different values of the quale_schemaType data property: \"belief\", \"emotion\", \"framenet\", \"goal\",  \"value\". \nFinally, it is worth mentioning that is a specific design choice of Drammar not to represent the nesting of states: only the type of the top level state, e.g., a belief, is represented, independent of what that belief contains in turn. This flat style of representation is determined by the decision not to commit to a specific logical account of state types. When Drammar is employed for annotation, the content nested into a state is described informally in natural language description accompanying the state, if needed. \nRefs: Gangemi, A., & Presutti, V. (2009). Ontology design patterns. In Handbook on ontologies (pp. 221-243). Springer Berlin, Heidelberg." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#label> "SituationSchema" <http://www.purl.org/drammar> .
