<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#hasGrounding> <http://www.w3.org/2000/01/rdf-schema#comment> "A relation between a dul:Entity and a dul:FormalEntity, which can be used to give a semiotic ('natural') counterpart to a formal entity, such as a Class, a Relation, a SetBuilder, etc. See also the ontology: FormalSemantics.owl" <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#hasGrounding> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#associatedWith> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/2000/01/rdf-schema#range> _:B550528e927f0ff04841a6d3054fccc65 <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/2000/01/rdf-schema#label> "is interpretant for"@en <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/2000/01/rdf-schema#domain> _:B2c5da5b883979cb56fd2cf9eaae31786 <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#isInterpretantFor> <http://www.w3.org/2000/01/rdf-schema#comment> "The Peircean interpretant relation, widely adopted in semiotics: a dul:InformationObject isInterpretantFor another, e.g. fourLeggedFriendOfHumans isInterpretantFor dog. \nSynonymy, associativity, and even topical proximity are all sources for interpretants, e.g.: domestic dog isInterpretantFor dog (synonymy); bark isInterpretantFor dog (associativity); veterinary isInterpretantFor dog (topical proximity).\nSemantic mechanisms such as metonymy depend on the interpretant relation.\nThe interpretant relation is here taken as very broad, also accepting realization of information as interpretants." <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> <http://www.w3.org/2000/01/rdf-schema#comment> "This ontology is a composition of some content design patterns for the semiotic triangle.\nIts structure is extracted from DOLCE-Ultralite (DOLCE+c.DnS), but it uses a different terminology, and explicitly defines the semiotic function: Expression is the semiotic term for dul:InformationObject, when they actually express or denote something; Meaning is the semiotic term for dul:SocialObject, when they are actually expressed by something, or are interpretation of something; Reference is the semiotic term for dul:Entity, when they are interpreted or denoted by something.\nThe denotes relation is equivalent to dul:isAbout, the expresses relation is imported from DOLCE Ultralite, and the hasInterpretation relation generalizes over: dul:isClassifiedBy, dul:isCoveredBy, dul:isDescribedBy, dul:isUnifiedBy, and dul:satisfies\n\nExtensions to the triangle:\nA typical extension of the semiotic triangle concerns the participation of agents: this is introduced by using the dul:conceptualizes relation, holding between a dul:Agent and a dul:SocialObject (the Meaning). \nAn additional extension concerns semiotic context: this is provided by including four notions of 'Context': 'Paradigm' (the context of the conceptualized meaning), 'KnowledgeCollective' (the context of agents that conceptualize the paradigm), 'Cotext' (the context of expressions), and dul:Situation (the context of denoted entities).\nA final extension links semiotics to formal semantics: this is provided by reusing dul:FormalEntity, iol:isGroundingFor, iol:FormalExpression, iol:isAssignedTo, iol:FormalLanguage, etc.\n\nThe complete pattern allows to declare relations between Expression(s) and their Reference(s) (denotes), between Expression(s) and their Meaning (dul:expresses), between Meaning(s) and Reference(s) (isInterpretationOf), between Reference(s) and dul:FormalEntity(ies) (iol:isGroundingFor), between dul:FormalEntity(ies) and iol:FormalExpression(s) (iol:isAssignedTo).\n\nThis 'formalization pathway' moves from Expression(s) to iol:FormalExpression(s) by taking into account both Meaning(s) and Referent(s). The informal denotation of Expression(s) is moved to a formal denotation (iol:isAssignedTo) of iol:FormalExpression(s).\nFor example: the Expression 'Mariachi' dul:expresses the dul:Concept (Meaning) 'MexicanStreetSinger' that isInterpretationOf the dul:Collection (Reference) 'TheStreetSingersFromMexico'. 'TheStreetSingersFromMexico' then iol:isGroundingFor e.g. the dul:Set (dul:FormalEntity) that includes all Mexican street singers, which iol:isAssignedTo e.g. the iol:FormalExpression 'owl:Class#Mariachi'.\n\nThe formalization pathway enables a technique to move from/to socio-cognitive and formal semantics through denotation, in the Tarskian sense. As a matter of fact, translating directly a Meaning into a FormalEntity (or viceversa) is not always clearly implementable, while passing through an extensional grounding is easier and more accessible to intuition.\n\nAmong possible uses, information extraction, ontology learning, KOS reengineering, lexical semantics, etc. For example, statistical learning of instances for a dul:Concept would be modelled as the building of a dul:Collection that isInterpretationOf the dul:Concept, but also dul:isGroundingFor a dul:Set that iol:isAssignedTo e.g. an owl:Class.\n\nAn additional semiotic pattern is based on the hasInterpretant relation, which allows to link two Expression(s) (or dul:InformationRealization(s)), when the second one counts as a Meaning (or a relatedMeaning) of the first. \nIn practice, this is implemented by allowing a relation between an Expression (or its realization), and whatever Meaning (or another dul:InformationRealization). Technically speaking, the correct path would be passing through another Expression used to express a Meaning for the first one:\n\n(Exp1 hasInterpretant some (Exp2 and expresses some (Meaning and isExpressedBy some Exp1)))\n\nor even:\n\n(Exp1 hasInterpretant some (Exp2 and expresses some (Meaning and relatedMeaning some (Meaning and isExpressedBy some Exp1))))\n\nbut given the expressive power of OWL, which lacks co-reference, this is the best sub-optimal solution."@en <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> <http://www.w3.org/2002/07/owl#versionInfo> "1.8\n1.2 \n- contains fine-tuning of cross-context relations. Now, the formalization pathway goes from expression to meaning to reference to formal entity to formal expression.\n1.3 \n- has all elements with English labels. Moreover, I added the relatedMeaning property, which allows to query across all object properties that have a Meaning in both domain and range.\n1.4 \n- has a new relation: hasInterpretant, based on Peirce's semiotics, which is applied between any two Expression(s), where the second provides an interpretive context for the first.\n1.5 \n- fixes a bug in the domain and range of isContextOf, now both generalized to dul:Entity, and consequently, Context is equivalently defined as anything that isContextOf some dul:Entity; some comments have also been edited.\n1.6 \n- added equivalentClass axiom between lmm:Meaning and dul:SocialObject (simplifies applications).\n1.7 \n- aligned all locally defined object properties to dul:associatedWith.\n1.8\n- simplified several restrictions in the semiotic pattern core, for improving reasoning performance." <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Ontology> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> <http://www.w3.org/2002/07/owl#imports> <http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> <http://www.w3.org/2000/01/rdf-schema#label> "Lexical MetaModel Level 1" <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#isGroundingFor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#isGroundingFor> <http://www.w3.org/2000/01/rdf-schema#comment> "A relation between a dul:Entity and a dul:FormalEntity, which can be used to give a semiotic ('natural') counterpart to a formal entity, such as a Class, a Relation, a SetBuilder, etc. See also the ontology: FormalSemantics.owl" <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/2000/01/rdf-schema#comment> "Any LMM1:Reference that isInstanceOf a dul:Concept" <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/2000/01/rdf-schema#label> "Individual reference"@en <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/2000/01/rdf-schema#subClassOf> _:B14a5af954b185dec69fdb8517a5862b8 <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#Reference> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#IndividualReference> <http://www.w3.org/2000/01/rdf-schema#subClassOf> _:Bcd064a2d9926e3ca82fb80052b5eb324 <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#MultipleReference> <http://www.w3.org/2000/01/rdf-schema#comment> "Any LMM1:Reference that is also a dul:Collection, and can have members that are individual references.\nAs a collection, a multiple reference can be covered by a dul:Concept, whose instances are the members of the MultipleReference . For example, JohnDoe (an IndividualReference) isMemberOf ACMEEmployees (a MultipleReference), that dul:isCoveredBy the Employee concept. It also holds that JohnDoe isInstanceOf Employee" <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#MultipleReference> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#Reference> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#MultipleReference> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Collection> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#MultipleReference> <http://www.w3.org/2000/01/rdf-schema#label> "Multiple reference"@en <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl#MultipleReference> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.ontologydesignpatterns.org/ont/lmm/LMM_L2.owl> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2002/07/owl#disjointWith> <https://w3id.org/pep/Process> <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://purl.oclc.org/NET/ssnx/ssn#FeatureOfInterest> <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2000/01/rdf-schema#comment> "A Process Executor can execute (implement) processes. A Process Executor may be a physical device, a computational method, a web service, a laboratory setup with a person following a method, or any other thing that can follow a Process. This concept generalizes ssn:Sensor, which in the latest version of the SSN ontology is a subclass of dul:Object. A dul:Object is any physical, social, or mental object, or a substance.\n\nPrototypical process executors are Sensor, Actuator, Estimator.\n\nLinks to ProcessExecution describe the Executions made.\n\nLinks to Processes define how the executor can make Executions (it may implement several Processes). A Process Executor implements each of the methods used by the Executions it made. \n\nOther metadata may detail geolocation, vendor, operator, consumed power, etc."@en <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2000/01/rdf-schema#label> "Process Executor" <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2003/06/sw-vocab-status/ns#term_status> "stable" <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/2000/01/rdf-schema#isDefinedBy> <https://w3id.org/pep/> <https://w3id.org/pep/> .
<https://w3id.org/pep/ProcessExecutor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <https://w3id.org/pep/> .
