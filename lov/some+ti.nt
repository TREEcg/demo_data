<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2000/01/rdf-schema#range> <http://erlangen-crm.org/current/E39_Actor> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2000/01/rdf-schema#comment> "Scope note:\nThis property identifies the E39 Actor or Actors who have or have had custody of an instance of E18 Physical Thing at some time.\n\nThe distinction with P50 has current keeper (is current keeper of) is that P49 has former or current keeper (is former or current keeper of) leaves open the question as to whether the specified keepers are current.\n\nP49 has former or current keeper (is former or current keeper of) is a shortcut for the more detailed path from E18 Physical Thing through P30 transferred custody of (custody transferred through), E10 Transfer of Custody, P28 custody surrendered by (surrendered custody through) or P29 custody received by (received custody through) to E39 Actor.\n\nExamples:\n- paintings from The Iveagh Bequest (E18) has former or current keeper Secure Deliveries Inc. (E40)\n\nIn First Order Logic:\nP49(x,y) ⊃ E18(x)\nP49(x,y) ⊃ E39(y)"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2000/01/rdf-schema#label> "P49 has former or current keeper"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2004/02/skos/core#notation> "P49" <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2002/07/owl#inverseOf> <http://erlangen-crm.org/current/P49i_is_former_or_current_keeper_of> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P49_has_former_or_current_keeper> <http://www.w3.org/2000/01/rdf-schema#domain> <http://erlangen-crm.org/current/E18_Physical_Thing> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P82_at_some_time_within> <http://www.w3.org/2000/01/rdf-schema#domain> <http://erlangen-crm.org/current/E52_Time-Span> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P82_at_some_time_within> <http://www.w3.org/2000/01/rdf-schema#label> "P82 at some time within"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P82_at_some_time_within> <http://www.w3.org/2000/01/rdf-schema#comment> "Scope note:\nThis property describes the maximum period of time within which an E52 Time-Span falls.\n\nSince Time-Spans may not have precisely known temporal extents, the CRM supports statements about the minimum and maximum temporal extents of Time-Spans. This property allows a Time-Span’s maximum temporal extent (i.e. its outer boundary) to be assigned an E61 Time Primitive value. Time Primitives are treated by the CRM as application or system specific date intervals, and are not further analysed.\n\nExamples:\n- the time-span of the development of the CIDOC CRM (E52) at some time within 1992-infinity (E61)\n\nIn First Order Logic:\nP82 (x,y) ⊃ E52(x)\nP82 (x,y) ⊃ E61(y)"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P82_at_some_time_within> <http://www.w3.org/2004/02/skos/core#notation> "P82" <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P82_at_some_time_within> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#DatatypeProperty> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2004/02/skos/core#notation> "P156" <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://erlangen-crm.org/current/P161_has_spatial_projection> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2000/01/rdf-schema#range> <http://erlangen-crm.org/current/E53_Place> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2000/01/rdf-schema#comment> "Scope note:\nThis property describes the largest volume in space that an instance of E18 Physical Thing has occupied at any time during its existence, with respect to the reference space relative to itself. This allows you to describe the thing itself as a place that may contain other things, such as a box that may contain coins. In other words, it is the volume that contains all the points which the thing has covered at some time during its existence. In the case of an E26 Physical Feature the default reference space is the one in which the object that bears the feature or at least the surrounding matter of the feature is at rest. In this case there is a 1:1 relation of E26 Feature and E53 Place. For simplicity of implementation multiple inheritance (E26 Feature IsA E53 Place) may be a practical approach.\n\nFor instances of E19 Physical Objects the default reference space is the one which is at rest to the object itself, i.e. which moves together with the object. We include in the occupied space the space filled by the matter of the physical thing and all its inner spaces.\n\nThis property is a subproperty of P161 has spatial projection because it refers to its own domain as reference space for its range, whereas P161 has spatial projection may refer to a place in terms of any reference space. For some instances of E18 Physical Object the relative stability of form may not be sufficient to define a useful local reference space, for instance for an amoeba. In such cases the fully\ndeveloped path to an external reference space and using a temporal validity component may be adequate to determine the place they have occupied.\n\nIn contrast to P156 occupies, the property P53 has former or current location identifies an instance of E53 Place at which a thing is or has been for some unspecified time span. Further it does not constrain the reference space of the referred instance of P53 Place.\n\nIn First Order Logic:\nP156 (x,y) = [E18(x) ∧ E53(y) ∧ P161(x,y) ∧ P157(y,x)]" <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2000/01/rdf-schema#label> "P156 occupies"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P156_occupies> <http://www.w3.org/2000/01/rdf-schema#domain> <http://erlangen-crm.org/current/E18_Physical_Thing> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2000/01/rdf-schema#range> <http://erlangen-crm.org/current/E39_Actor> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2004/02/skos/core#notation> "P51" <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2002/07/owl#inverseOf> <http://erlangen-crm.org/current/P51i_is_former_or_current_owner_of> <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2000/01/rdf-schema#comment> "Scope note:\nThis property identifies the E39 Actor that is or has been the legal owner (i.e. title holder) of an instance of E18 Physical Thing at some time.\n\nThe distinction with P52 has current owner (is current owner of) is that P51 has former or current owner (is former or current owner of) does not indicate whether the specified owners are current. P51 has former or current owner (is former or current owner of) is a shortcut for the more detailed path from E18 Physical Thing through P24 transferred title of (changed ownership through), E8 Acquisition, P23 transferred title from (surrendered title through), or P22 transferred title to (acquired title through) to E39 Actor.\n\nExamples:\n- paintings from the Iveagh Bequest (E18) has former or current owner Lord Iveagh (E21)\n\nIn First Order Logic:\nP51(x,y) ⊃ E18(x)\nP51(x,y) ⊃ E39(y)"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2000/01/rdf-schema#label> "P51 has former or current owner"@en <http://erlangen-crm.org/current/> .
<http://erlangen-crm.org/current/P51_has_former_or_current_owner> <http://www.w3.org/2000/01/rdf-schema#domain> <http://erlangen-crm.org/current/E18_Physical_Thing> <http://erlangen-crm.org/current/> .
<http://softeng.polito.it/rsctx#Time> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://softeng.polito.it/rsctx> .
<http://softeng.polito.it/rsctx#Time> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.w3.org/2006/time#Instant> <http://softeng.polito.it/rsctx> .
<http://softeng.polito.it/rsctx#Time> <http://www.w3.org/2000/01/rdf-schema#label> "Time"@en <http://softeng.polito.it/rsctx> .
<http://softeng.polito.it/rsctx#Time> <http://www.w3.org/2000/01/rdf-schema#comment> "Time is an instant, i.e. a timestamp. Then it can be characterized by some TimeIntervals which it belongs to, such as winter, Monday and morning."@en <http://softeng.polito.it/rsctx> .
<http://www.purl.org/drammar#Unit> <http://www.w3.org/2000/01/rdf-schema#comment> "Unit Units are the segmentation of drama. A drama can have multiple\n            segmentations. Units are ordered by some Timeline. Units are devoted to the\n            representation of characters' actions. So, we require that any unit contains at\n            least one action whose description (ProcessSchema) encompasses at least one role having\n            an agent as a filler. If a building collapses, this action, by itself, can be part of\n            Unit only if an agent is involved in it (e.g., an agent dies). This definition\n            guarantees that, in the minimal case, at least one agent appears as filler of the roles\n            in the description of at least an action of every unit. A Unit has one or more actions\n            as its members (hasMember property)." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Unit> <http://www.w3.org/2002/07/owl#equivalentClass> _:B9bb097bacc105761e8c8777ce530cccf <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Unit> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Unit> <http://www.w3.org/2000/01/rdf-schema#label> "Unit" <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Scene> <http://www.w3.org/2000/01/rdf-schema#label> "Scene" <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Scene> <http://www.w3.org/2000/01/rdf-schema#comment> "Scene Drama is divided into scenes, which correspond to an extent of the\n            'text' of drama. Scenes (as a type of TreeNode) form a hierarchy, which\n            represents the recursive nature of drama. This is obtained by implementing the Scene\n            class as a subclass of the TreeNode class. Scenes contains children scenes: this\n            relation is modeled through the hasChild property. All scenes span some timeline (spans\n            object property), i.e., they have a correspondance with some extent of the drama text\n            (represented by the Timeline class)." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Scene> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Scene> <http://www.w3.org/2002/07/owl#equivalentClass> _:Bf50c8bcb9b74324a35ce21ad4b60f849 <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Scene> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.purl.org/drammar#TreeNode> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/2002/07/owl#equivalentClass> _:B50d2eebb6368ec00377644b97a424fcf <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/2002/07/owl#disjointWith> <http://www.purl.org/drammar#UnintentionalProcess> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/2000/01/rdf-schema#comment> "An Action is an intentional Process, which is a type of Process. Formally, an\n            action is an Process which is constrained to be contained (isMemberOf) some Unit. In\n            Drammar, an Action can be part of a plan of an agent (formally, a plan ia a list of\n            actions), or can be included in a Unit (ordered into some timeline). Only direct\n            executable plans (DirectlyExecutablePlan class) contain actions The Action class is\n            formally disjoint with the UnintentionalEventiveProcess class. We have introduced an\n            explicit boolean datatype property isIntentional, because it could be that the\n            annotators will use actions directly in the units (i.e. without explicitly introducing a\n            plan for it)." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/2000/01/rdf-schema#label> "Action" <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#Action> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.purl.org/drammar#Process> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#MentalState> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#MentalState> <http://www.w3.org/2000/01/rdf-schema#label> "MentalState" <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#MentalState> <http://www.w3.org/2000/01/rdf-schema#comment> "MentalStates are EventiveStates that are attributed to the mind of an agent.\n            There are four types of mental states: 1. Emotion 2. Belief 3. Goal 4. Value Belief and\n            Goal are traditionally described as having a propositional content because they both\n            concern some attitude of the agent toward a proposition; in Drammar, we don't\n            enforce this distinction because the reference theoriesd we adopt for emotion and values\n            also enforce some time of propositional content. The only difference is that only the\n            schema types for beliefs and goals (BeliefSchema and GoalSchema) have a propositional\n            content attached to it (through the propositionalContent object property). A MentalState\n            is defined as an EventiveState that is described by a MentalStateSchema. The latter are\n            to be specified as EmotionSchema, BeliefSchema, GoalSchema, ValueSchema,\n            depending on the MentalState type: so, the MentalStateSchema type works as a selector\n            for the right trait of the mental schema." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#MentalState> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.purl.org/drammar#State> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#MentalState> <http://www.w3.org/2002/07/owl#equivalentClass> _:Bd72c191414c83afd9aa4f13ccddf15ec <http://www.purl.org/drammar> .
