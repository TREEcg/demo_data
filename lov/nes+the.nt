<http://spinrdf.org/sp#query> <http://www.w3.org/2000/01/rdf-schema#comment> "Links a SubQuery resource with the nested Query." <http://spinrdf.org/sp> .
<http://spinrdf.org/sp#query> <http://www.w3.org/2000/01/rdf-schema#range> <http://spinrdf.org/sp#Query> <http://spinrdf.org/sp> .
<http://spinrdf.org/sp#query> <http://www.w3.org/2000/01/rdf-schema#subPropertyOf> <http://spinrdf.org/sp#systemProperty> <http://spinrdf.org/sp> .
<http://spinrdf.org/sp#query> <http://www.w3.org/2000/01/rdf-schema#label> "query" <http://spinrdf.org/sp> .
<http://spinrdf.org/sp#query> <http://www.w3.org/2000/01/rdf-schema#domain> <http://spinrdf.org/sp#SubQuery> <http://spinrdf.org/sp> .
<http://spinrdf.org/sp#query> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/1999/02/22-rdf-syntax-ns#Property> <http://spinrdf.org/sp> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/2000/01/rdf-schema#comment> "A wfdesc:Workflow is a directed graph in which the nodes are wfdesc:Process instances and the edges (wfdesc:DataLink instances) represent data dependencies between the constituent wfdesc:Process descriptions.\n\nThe resource that contains the wfdesc:WorkflowDefinition (say the XML file saved from a workflow designer tool) can be specified with wfdesc:hasWorkflowDefinition. Research objects might aggregate a wfdesc:Workflow, a wfdesc:WorkflowDefinition, or (recommended) both.\n\nA wfdesc:Workflow defines associated wfdesc:Process using wfdesc:hasSubProcess. A specialisation of this property is wfdesc:hasSubWorkflow, signifying that the process is a wfdesc:Workflow itself, which is further described in a similar fashion.\n\nAs a subclass of wfdesc:Process a wfdesc:Workflow can also define wfdesc:hasInput/wfdesc:hasOutput parameters - these would be inputs taken at workflow execution time, and final outputs of the workflow. (Note: Not all dataflow systems have this concept of workflow parameters)\n\nwfdesc:Parameter descriptions are linked using wfdesc:DataLink descriptions associated with the wfdesc:Workflow using wfdesc:hasDataLink.\n\nA wfdesc:Parameter defined with wfdesc:hasInput on a wfdesc:Workflow is considered an wfdesc:Input \"outside\" the workflow (ie. if it is a subworkflow), but an wfdesc:Output \"inside\" the workflow (where it can be connected to a wfdesc:Input of a wfdesc:Process). Thus such parameters can be linked \"through\" the workflow without having a \"mirrored\" port inside.\n\n\nExample:\n\n```\n@prefix wfdesc: <http://purl.org/wf4ever/wfdesc#> .\n:outerWorkflow a wfdesc:Workflow ;\n  wfdesc:hasSubWorkflow :innerWorkflow ;\n  wfdesc:hasSubProcess :procA, :procC .\n\n:procA a wfdesc:Process ;\n  wfdesc:hasOutput :param1 .\n\n:procC a wfdesc:Process ;\n  wfdesc:hasInput :param2 ;\n  wfdesc:hasOutput :param3 .\n\n\n:innerWorkflow a wfdesc:Workflow ;\n  wfdesc:hasInput :param4 ;\n  wfdesc:hasOutput :param5 ;\n  wfdesc:hasProcess :procB .\n\n:procB a wfdesc:Process ;\n  wfdesc:hasInput :param6 ;\n  wfdesc:hasOutput :param7 .\n\n:innerWorkflow wfdesc:hasDataLink\n   [ wfdesc:hasSource :param4; wfdesc:hasSink :param6 ],\n   [ wfdesc:hasSource :param7; wfdesc:hasSink :param5 ] .\n\n:outerWorkflow wfdesc:hasDataLink\n  [ wfdesc:hasSource :param1; wfdesc:hasSink :param4 ],\n  [ wfdesc:hasSource :param5; wfdesc:hasSink :param2 ] .\n```\n\n\nIn this example :param1 is the output of :procA. :param1 is the source in a datalink that goes to the input :param4 of the :innerWorkflow. :param4 is however also the source of an inner datalink, going to input :param6 of the nested :procB.\n\nFrom this :param4 is both an wfdesc:Input and wfdesc:Output (which is why these two classes are not disjoint)"@en <http://purl.org/wf4ever/wfdesc> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://purl.org/wf4ever/wfdesc> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/2000/01/rdf-schema#isDefinedBy> <http://purl.org/wf4ever/wfdesc> <http://purl.org/wf4ever/wfdesc> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://purl.org/wf4ever/wfdesc#Process> <http://purl.org/wf4ever/wfdesc> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/2000/01/rdf-schema#label> "Workflow"@en <http://purl.org/wf4ever/wfdesc> .
<http://purl.org/wf4ever/wfdesc#Workflow> <http://www.w3.org/2000/01/rdf-schema#seeAlso> <http://purl.org/wf4ever/wfdesc#WorkflowDefinition> <http://purl.org/wf4ever/wfdesc> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.purl.org/drammar#DescriptionTemplate> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#comment> "The situation schema provides the pattern for the description of incidents and states. It is inspired by the Situation ontology Pattern of the Ontology Design Pattern initiative (http://ontologydesignpatterns.org/). So, a SituationSchema describes (\"describes\" object property) a DramaPerdurant (either a State or a Process).\nThe schema works as a hub for the roles involved in a situation. The property hasRole links the Situation class (its domain) with the Role class (the range of the property). Also, notice that, as illustrated in the documentation of the SituationSchema class, a Situation Schema (or, better, its subclasses) does not directly refer to the external linguistic knowledge employed to describe drama: rather, it refers to the ExternalRefSchema class (subclass of the top level ExternalReference class), which in  turn refers to the linguistic knowledge. The SituationSchema class specializes into specific schemata for describing specific type of situations: \n- FrameNetSchema: for describing processes, like giving or killing (in Drammar, they are grouped into units arranged on timelines), and states, like being behind some object or being dead (in Drammar, they are bundled into sets that border timelines and plans). \n- MentalStateSchema: this class groups the specific types of schemata for describing the mental states of the agents in Drammar, namely beliefs, goals, emotions and values. \nTechnically, the subtypes of SituationSchema are characterized by different values of the quale_schemaType data property: \"belief\", \"emotion\", \"framenet\", \"goal\",  \"value\". \nFinally, it is worth mentioning that is a specific design choice of Drammar not to represent the nesting of states: only the type of the top level state, e.g., a belief, is represented, independent of what that belief contains in turn. This flat style of representation is determined by the decision not to commit to a specific logical account of state types. When Drammar is employed for annotation, the content nested into a state is described informally in natural language description accompanying the state, if needed. \nRefs: Gangemi, A., & Presutti, V. (2009). Ontology design patterns. In Handbook on ontologies (pp. 221-243). Springer Berlin, Heidelberg." <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://www.purl.org/drammar> .
<http://www.purl.org/drammar#SituationSchema> <http://www.w3.org/2000/01/rdf-schema#label> "SituationSchema" <http://www.purl.org/drammar> .
