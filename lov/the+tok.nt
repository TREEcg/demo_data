<http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Word> <http://www.w3.org/2000/01/rdf-schema#label> "Word"@en <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
<http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Word> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
<http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Word> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Structure> <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
<http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Word> <http://www.w3.org/2000/01/rdf-schema#comment> "\n    The Word class represents strings that are tokens or words. A string is a Word, if it is a word. We don't nitpic about whether it is a a pronoun, a name, a punctuation mark or an apostrophe or whether it is separated by white space from another Word or something else. The string 'He enters the room.' for example has 5 words. Words are assigned by a tokenizer NIF Implementation. Single word phrases might be tagged as nif:Word and nif:Phrase. \n    \n    Example 1: \"The White House\" are three Words separated by whitespace\n        \n    Comment 1: We adopted the definition style from foaf:Person, see here: http://xmlns.com/foaf/spec/#term_Person We are well aware that the world out there is much more complicated, but we are ignorant about it, for the following reasons:\n    Comment 2:  \n    \n    1. NIF has a client-server and the client has the ability to dictate the tokenization to the server (i.e. the NIF Implementation) by sending properly tokenized NIF annotated with nif:Word. All NIF Implementations are supposed to honor and respect the current assignment of the Word class. Thus the client should decide which NIF Implementation should create the tokenization. Therefore this class is not descriptive, but prescriptive.\n    2. The client may choose to send an existing tokenization to a NIF Implementation, with the capability to change (for better or for worse) the tokenization. \n    \n    \n   \n    The class has not been named 'Token' as the NLP definition of 'token' is descriptive (and not well-defined), while the assignment of what is a Word and what not is prescriptive, e.g. \"can't\" could be described as one, two or three tokens or defined as being one, two or three words. For further reading, we refer the reader to: By all these lovely tokens... Merging conflicting tokenizations by Christian Chiarcos, Julia Ritz, and Manfred Stede. Language Resources and Evaluation 46(1):53-74 (2012) or the short form: http://www.aclweb.org/anthology/W09-3005\n    There the task at hand is to merge two tokenization T_1 and T_2 which is normally not the case in the NIF world as tokenization is prescribed, i.e. given as a baseline (Note that this ideal state might not be achieved by all implementations.)\n    \n    Changelog:\n    * 0.1.1 fixed spelling\n    * 0.2.1 added a proper definition.\n    * 0.2.3 added examples and clarifications\n    "@en <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
<http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#Word> <http://www.w3.org/2002/07/owl#versionInfo> "0.2.2" <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> .
<https://www.w3.org/2019/wot/security#token> <http://www.w3.org/2000/01/rdf-schema#label> "token" <https://www.w3.org/2019/wot/security#> .
<https://www.w3.org/2019/wot/security#token> <http://www.w3.org/2000/01/rdf-schema#comment> "URI of the token server."@en <https://www.w3.org/2019/wot/security#> .
<https://www.w3.org/2019/wot/security#token> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#ObjectProperty> <https://www.w3.org/2019/wot/security#> .
<https://www.w3.org/2019/wot/security#token> <http://schema.org/domainIncludes> <https://www.w3.org/2019/wot/security#OAuth2SecurityScheme> <https://www.w3.org/2019/wot/security#> .
<https://w3id.org/idsa/core/DatRequestPayload> <http://www.w3.org/2000/01/rdf-schema#comment> "The Dynamic Attribute Token (DAT) *Request* Payload is the JSON Element of any DAT containing the claims of the token bearer. This payload itself is a JSON-LD encoded RDF class with a defined set of attributes. These attributes are either defined by RFC 7519 or by the IDS Information Model. As a direct consequence of regarding the DAT Payload as JSON-LD, *all* DAT Payloads must have exactly one \"@context\" attribute with the IDS context URI as its value and a \"@type\" with ids:DatPayload as its value. Note that, different to the DatPayload, the DatRequestPayload contains the *self-claims* of a connector and is not yet signed by any DAPS. Consequently, no other connector must accept a DatRequest object as a DAT. A DatRequest and its contained DatRequestPayload is *only* intended for interactions with a DAPS and *nothing else*!"@en <https://w3id.org/idsa/core> .
<https://w3id.org/idsa/core/DatRequestPayload> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Class> <https://w3id.org/idsa/core> .
<https://w3id.org/idsa/core/DatRequestPayload> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <https://w3id.org/idsa/core/JwtPayload> <https://w3id.org/idsa/core> .
<https://w3id.org/idsa/core/DatRequestPayload> <http://www.w3.org/2000/01/rdf-schema#seeAlso> <https://tools.ietf.org/html/rfc7519> <https://w3id.org/idsa/core> .
<https://w3id.org/idsa/core/DatRequestPayload> <http://www.w3.org/2000/01/rdf-schema#label> "DAT Request Payload"@en <https://w3id.org/idsa/core> .
